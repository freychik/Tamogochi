import telebot
import random
import datetime
import threading
from telebot import types

bot = telebot.TeleBot('6428337642:AAHGqm88cznR7FPYzsErZPa9LRe79TSvxCA')


win_streak = {}  
win_record = {}

tamagotchis = {}
user_states = {}
last_update_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

class Tamagotchi:
    def __init__(self, owner_id, pet_name):
        self.owner_id = owner_id
        self.pet_name = pet_name
        self.health = 100
        self.hunger = 100
        self.happiness = 100
        self.age = 0
        self.last_update_time = datetime.datetime.now()
        self.inventory = {"–ï–¥–∞": {}, "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ": {}, "–ò–≥—Ä—É—à–∫–∏": {}}
        self.balance = 1000  # –ë–∞–ª–∞–Ω—Å –ª–µ–¥–µ–Ω—Ü–µ–≤
        self.job = None  # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ç–∞–º–∞–≥–æ—á–∏
        self.salary = 0  # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
   

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if user_id not in tamagotchis:
        user_states[user_id] = 'creating_tamagotchi'
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üòÑ –Ø —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫, —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∞–º–∞–≥–æ—á–∏! üêæ –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –º–Ω–µ –∏–º—è?")
        bot.register_next_step_handler(message, create_tamagotchi_name)
        tamagotchis[user_id] = Tamagotchi(user_id, "")  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Tamagotchi
        tamagotchis[user_id].start = True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    else:
        user_states[user_id] = 'existing_tamagotchi'
        show_existing_tamagotchi_menu(message)


def show_existing_tamagotchi_menu(message):
    user_id = message.chat.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    yes_button = types.KeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏")
    no_button = types.KeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")
    keyboard.add(yes_button, no_button)
    
    bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–º–∞–≥–æ—á–∏. –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ?", reply_markup=keyboard)
    bot.register_next_step_handler(message, handle_existing_tamagotchi)

def handle_existing_tamagotchi(message):
    user_id = message.chat.id
    if message.text.lower() == "–¥–∞, —É–¥–∞–ª–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏":
        del tamagotchis[user_id]
        bot.send_message(user_id, "–í–∞—à —Ç–∞–º–∞–≥–æ—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ.")
        start(message)
    elif message.text.lower() == "–Ω–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å":
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞–º–∞–≥–æ—á–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        show_main_menu(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

def create_tamagotchi_name(message):
    user_id = message.chat.id
    pet_name = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    if ' ' in pet_name:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        retry_button = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ")
        markup.add(retry_button)
        bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.", reply_markup=markup)
        bot.register_next_step_handler(message, create_tamagotchi_name_retry)
    else:
       tamagotchis[user_id] = Tamagotchi(user_id, pet_name)
       message_text = f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –¢–∞–º–∞–≥–æ—á–∏ {pet_name} –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üéâ\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /help üòä"
       bot.send_message(user_id, message_text)
       show_main_menu(user_id)


def create_tamagotchi_name_retry(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
    bot.register_next_step_handler(message, create_tamagotchi_name)

@bot.message_handler(commands=['stats'])
def handle_stats(message):
    user_id = message.chat.id
    show_main_menu(user_id, command='/stats')

def show_main_menu(user_id):
    if user_id in tamagotchis: 
        tamagotchi = tamagotchis[user_id]
        menu_text = f"{tamagotchi.pet_name}:\n"
        menu_text += f"–ó–¥–æ—Ä–æ–≤—å–µ: {tamagotchi.health}\n"
        menu_text += f"–ï–¥–∞: {tamagotchi.hunger}\n"
        menu_text += f"–°—á–∞—Å—Ç—å–µ: {tamagotchi.happiness}\n"
        menu_text += f"–í–æ–∑—Ä–∞—Å—Ç: {tamagotchi.age} –≥–æ–¥(–∞)\n"
        menu_text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n/play - –ü–æ–∏–≥—Ä–∞—Ç—å\n/feed - –ö–æ—Ä–º–∏—Ç—å\n/heal - –õ–µ—á–∏—Ç—å\n/help - –ü–æ–º–æ—â—å\n"
        bot.send_message(user_id, menu_text, reply_markup=get_main_menu_keyboard())
    else:
        bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–º–∞–≥–æ—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

def get_main_menu_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    play_button = telebot.types.KeyboardButton('/play')
    feed_button = telebot.types.KeyboardButton('/feed')
    heal_button = telebot.types.KeyboardButton('/heal')
    help_button = telebot.types.KeyboardButton('/help')
    keyboard.add(play_button, feed_button, heal_button, help_button)
    return keyboard

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö —Ü–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω
shop_items = {
    "–ï–¥–∞": {
        "items": {
            "–ö–æ—Ä–º –¥–ª—è –∫–æ—à–µ–∫": {"price": 10, "effect": 20},  # –≠—Ñ—Ñ–µ–∫—Ç: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏ –Ω–∞ 20
            "–°–µ–º–µ–Ω–∞": {"price": 8, "effect": 15},
            "–ú—è—Å–æ": {"price": 15, "effect": 25},
            "–û–≤–æ—â–∏": {"price": 12, "effect": 18},
            "–ú–æ–ª–æ–∫–æ": {"price": 7, "effect": 12}
        }
    },
    "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ": {
        "items": {
            "–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫": {"price": 20, "effect": 30},  # –≠—Ñ—Ñ–µ–∫—Ç: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ 30
            "–í–∏—Ç–∞–º–∏–Ω—ã": {"price": 15, "effect": 25},
            "–ë–∏–Ω—Ç": {"price": 10, "effect": 18},
            "–ê—Å–ø–∏—Ä–∏–Ω": {"price": 8, "effect": 12},
            "–®–ø—Ä–∏—Ü": {"price": 12, "effect": 20}
        }
    },
    "–ò–≥—Ä—É—à–∫–∏": {
        "items": {
            "–ú—è—á–∏–∫": {"price": 5, "effect": 2},  # –≠—Ñ—Ñ–µ–∫—Ç: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è –Ω–∞ 2
            "–ü–ª—é—à–µ–≤–∞—è –∏–≥—Ä—É—à–∫–∞": {"price": 10, "effect": 5},
            "–ö—É–±–∏–∫–∏": {"price": 8, "effect": 3},
            "–ú–∞—à–∏–Ω–∫–∞": {"price": 15, "effect": 6},
            "–ö—É–∫–ª–∞": {"price": 12, "effect": 4}
        }
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/balance"
@bot.message_handler(commands=['balance'])
def show_balance(message):
    user_id = message.chat.id
    tamagotchi = tamagotchis.get(user_id)
    if tamagotchi:
        bot.send_message(user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ª–µ–¥–µ–Ω—Ü–µ–≤: {tamagotchi.balance}")
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–º–∞–≥–æ—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/job"
@bot.message_handler(commands=['job'])
def get_job(message):
    user_id = message.chat.id
    tamagotchi = tamagotchis[user_id]

    if not tamagotchi.job:  # –ï—Å–ª–∏ —É —Ç–∞–º–∞–≥–æ—á–∏ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for job_name, job_info in jobs.items():
            keyboard.add(types.KeyboardButton(job_name))
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_get_job_choice)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∏–ª–∏ —É–≤–æ–ª–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é.")
        show_main_menu(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç—ã
def process_get_job_choice(message):
    user_id = message.chat.id
    choice = message.text
    tamagotchi = tamagotchis[user_id]

    if choice == "–û—Ç–º–µ–Ω–∞":
        show_main_menu(user_id)
    elif choice in jobs:
        job_info = jobs[choice]
        tamagotchi.job = choice
        tamagotchi.salary = job_info["salary"]
        tamagotchi.job_duration = job_info["duration"]
        tamagotchi.food_cost_per_minute = job_info["food_cost_per_minute"]
        tamagotchi.mood_cost_per_minute = job_info["mood_cost_per_minute"]

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã
        threading.Timer(tamagotchi.job_duration * 60, finish_job, [user_id]).start()

        bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É: {choice}. –†–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è {tamagotchi.job_duration} –º–∏–Ω—É—Ç. –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {job_info['salary']} –ª–µ–¥–µ–Ω—Ü–µ–≤. –†–∞–±–æ—Ç–∞ –∑–∞–±–µ—Ä–µ—Ç {tamagotchi.food_cost_per_minute * tamagotchi.job_duration} –µ–¥–∏–Ω–∏—Ü –µ–¥—ã –∏ {tamagotchi.mood_cost_per_minute * tamagotchi.job_duration} –µ–¥–∏–Ω–∏—Ü –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
        show_main_menu(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
        get_job(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def finish_job(user_id):
    tamagotchi = tamagotchis[user_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∫ –±–∞–ª–∞–Ω—Å—É
    tamagotchi.balance += tamagotchi.salary

    # –í—ã—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –µ–¥—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    tamagotchi.hunger -= tamagotchi.food_cost_per_minute * tamagotchi.job_duration
    tamagotchi.happiness -= tamagotchi.mood_cost_per_minute * tamagotchi.job_duration

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ
    tamagotchi.job = None
    tamagotchi.salary = 0
    tamagotchi.job_duration = 0
    tamagotchi.food_cost_per_minute = 0
    tamagotchi.mood_cost_per_minute = 0

    bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É.")
        
# –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –∏—Ö –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏
jobs = {
    "–£–±–æ—Ä—â–∏–∫": {"salary": 10, "duration": 5, "food_cost_per_minute": 1, "mood_cost_per_minute": 2},
    "–û—Ñ–∏—Ü–∏–∞–Ω—Ç": {"salary": 15, "duration": 10, "food_cost_per_minute": 2, "mood_cost_per_minute": 3},
    "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π": {"salary": 12, "duration": 15, "food_cost_per_minute": 3, "mood_cost_per_minute": 4},
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/shop"
@bot.message_handler(commands=['shop'])
def show_shop(message):
    user_id = message.chat.id
    tamagotchi = tamagotchis.get(user_id)
    if tamagotchi:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for category_name, category_info in shop_items.items():
            keyboard.add(types.KeyboardButton(category_name))
        back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
        keyboard.add(back_button)

        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_shop_category_choice)
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–º–∞–≥–æ—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/inventory"
@bot.message_handler(commands=['inventory'])
def show_inventory(message):
    user_id = message.chat.id
    tamagotchi = tamagotchis.get(user_id)

    if tamagotchi:
        inventory_text = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        for category_name, items in tamagotchi.inventory.items():
            inventory_text += f"{category_name}:\n"
            if items:
                for item_name, count in items.items():
                    inventory_text += f"- {item_name} ({count} —à—Ç.)\n"
            else:
                inventory_text += "- –ü—É—Å—Ç–æ\n"
            inventory_text += "\n"

        bot.send_message(user_id, inventory_text)
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–º–∞–≥–æ—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
def process_shop_category_choice(message):
    user_id = message.chat.id
    choice = message.text
    if choice == "–ù–∞–∑–∞–¥":
        show_main_menu(user_id)
    elif choice in shop_items:
        show_category_items(user_id, choice)
    else:
        bot.send_message(user_id, "–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        show_shop(message)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def show_category_items(user_id, category_name):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    category_info = shop_items[category_name]
    for item_name, item_info in category_info["items"].items():
        effect_info = f" (–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏: +{item_info['effect']})" if category_name == "–ï–¥–∞" else \
                      f" (–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è: +{item_info['effect']})" if category_name == "–ò–≥—Ä—É—à–∫–∏" else \
                      f" (–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è: +{item_info['effect']})" if category_name == "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ" else ""
        button_text = f"{item_name} - {item_info['price']} –ª–µ–¥.{effect_info}"
        keyboard.add(types.KeyboardButton(button_text))
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    keyboard.add(back_button)

    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':", reply_markup=keyboard)
    bot.register_next_step_handler_by_chat_id(user_id, process_item_choice, category_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def process_item_choice(message, category_name):
    user_id = message.chat.id
    choice = message.text
    if choice == "–ù–∞–∑–∞–¥":
        show_shop(message)
    else:
        item_name = choice.split(" - ")[0]
        category_info = shop_items[category_name]
        if item_name in category_info["items"]:
            buy_item(user_id, item_name, category_name)
        else:
            bot.send_message(user_id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            show_category_items(user_id, category_name)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
def buy_item(user_id, item_name, category_name):
    tamagotchi = tamagotchis[user_id]
    category_info = shop_items[category_name]
    item_info = category_info["items"][item_name]

    if tamagotchi.balance >= item_info["price"]:
        tamagotchi.balance -= item_info["price"]

        inventory = tamagotchi.inventory.get(category_name, {})
        if item_name in inventory:
            inventory[item_name] += 1
        else:
            inventory[item_name] = 1
        tamagotchi.inventory[category_name] = inventory

        bot.send_message(user_id, f"–í—ã –∫—É–ø–∏–ª–∏ {item_name} –∑–∞ {item_info['price']} –ª–µ–¥–µ–Ω—Ü–µ–≤.\n"
                                  f"{tamagotchi.pet_name} –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!")
        show_main_menu(user_id)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ–¥–µ–Ω—Ü–µ–≤.")
        show_main_menu(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/feed"
@bot.message_handler(commands=['feed'])
def feed_pet(message):
    user_id = message.chat.id
    tamagotchi = tamagotchis[user_id]
    inventory = tamagotchi.inventory.get("–ï–¥–∞", [])

    if not inventory:
        bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ—Ç –µ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item_name in inventory:
        keyboard.add(types.KeyboardButton(item_name))
    cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    keyboard.add(cancel_button)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ–µ–≥–æ —Ç–∞–º–∞–≥–æ—á–∏:", reply_markup=keyboard)
    bot.register_next_step_handler(message, process_feed_choice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥—ã –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
def process_feed_choice(message):
    user_id = message.chat.id
    choice = message.text
    tamagotchi = tamagotchis[user_id]
    inventory = tamagotchi.inventory.get("–ï–¥–∞", [])

    if choice == "–û—Ç–º–µ–Ω–∞":
        show_main_menu(user_id)
    elif choice in inventory:
        feed_food(user_id, choice)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –µ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
        show_main_menu(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
def feed_food(user_id, food_name):
    tamagotchi = tamagotchis[user_id]
    inventory = tamagotchi.inventory["–ï–¥–∞"]
    item_info = shop_items["–ï–¥–∞"]["items"][food_name]

    if tamagotchi.hunger < 100:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫—É—à–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Å—ã—Ç
        if food_name in inventory:
            inventory[food_name] -= 1
            if inventory[food_name] == 0:
                del inventory[food_name]
            tamagotchi.inventory["–ï–¥–∞"] = inventory

            tamagotchi.hunger += item_info['effect']
            if tamagotchi.hunger > 100:
                tamagotchi.hunger = 100

            bot.send_message(user_id, f"{tamagotchi.pet_name} –ø–æ–∫—É—à–∞–ª {food_name} –∏ —Ç–µ–ø–µ—Ä—å —Å—ã—Ç.")
            show_main_menu(user_id)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –µ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
            show_main_menu(user_id)
    else:
        bot.send_message(user_id, f"{tamagotchi.pet_name} —É–∂–µ —Å—ã—Ç –∏ –Ω–µ —Ö–æ—á–µ—Ç –µ—Å—Ç—å.")
        show_main_menu(user_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "/heal"
@bot.message_handler(commands=['heal'])
def heal_pet(message):
    user_id = message.chat.id
    if user_id in tamagotchis:
        tamagotchi = tamagotchis[user_id]
        if tamagotchi.health < 100:
            tamagotchi.health = min(100, tamagotchi.health + 20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å—è
            bot.send_message(user_id, f"{tamagotchi.pet_name} –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–µ–±—è –ª—É—á—à–µ!")
            show_main_menu(user_id)
        else:
            bot.send_message(user_id, "–ü–∏—Ç–æ–º–µ—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤!")

@bot.message_handler(commands=['play'])
def play_with_tamagotchi(message):
    user_id = message.chat.id
    if user_id in tamagotchis:
        show_play_menu(user_id)

def show_play_menu(user_id):
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    game1_button = telebot.types.KeyboardButton('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞')
    game2_button = telebot.types.KeyboardButton('–û—Ä—ë–ª –∏ –†–µ—à–∫–∞')
    game3_button = telebot.types.KeyboardButton('–ò–≥—Ä–∞ 3')
    back_button = telebot.types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(game1_button, game2_button, game3_button, back_button)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞' or message.text == '–û—Ä—ë–ª –∏ –†–µ—à–∫–∞' or message.text == '–ò–≥—Ä–∞ 3')
def handle_game_choice(message):
    user_id = message.chat.id
    if user_id in tamagotchis:
        game_choice = message.text
        if game_choice == '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞':
            play_rock_paper_scissors(user_id)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
        elif game_choice == '–û—Ä—ë–ª –∏ –†–µ—à–∫–∞':
            play_heads_or_tails(user_id)
            pass
        elif game_choice == '–ò–≥—Ä–∞ 3':
            # –ö–æ–¥ –¥–ª—è –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã 3
            pass

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'end_game')
def handle_end_game(message):
    user_id = message.chat.id
    if message.text.lower() == "—Å—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        if user_states[user_id] == 'playing_rock_paper_scissors':
            play_rock_paper_scissors(user_id)
        elif user_states[user_id] == 'playing_heads_or_tails':
            play_heads_or_tails(user_id)
    elif message.text.lower() == "–≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        show_main_menu(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")

def play_rock_paper_scissors(user_id):
    global win_streak
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    rock_button = telebot.types.KeyboardButton('–ö–∞–º–µ–Ω—å')
    paper_button = telebot.types.KeyboardButton('–ë—É–º–∞–≥–∞')
    scissors_button = telebot.types.KeyboardButton('–ù–æ–∂–Ω–∏—Ü—ã')
    keyboard.add(rock_button, paper_button, scissors_button)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?", reply_markup=keyboard)
    user_states[user_id] = 'playing_rock_paper_scissors'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –∏–≥—Ä–µ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'playing_rock_paper_scissors')
def handle_rock_paper_scissors_choice(message):
    global win_streak
    global win_record
    user_id = message.chat.id
    user_choice = message.text.lower()
    bot_choice = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])

    result = determine_rps_winner(user_choice, bot_choice)
    tamagotchi = tamagotchis[user_id]

    if result == "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!":
        happiness_gain = random.randint(2, 5)
        tamagotchi.happiness += happiness_gain  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–∞—Å—Ç—å–µ –ø—Ä–∏ –ø–æ–±–µ–¥–µ (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 5)
        tamagotchi.happiness = min(100, tamagotchi.happiness)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è –¥–æ 100
        win_streak[user_id] = win_streak.get(user_id, 0) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        if win_streak[user_id] > win_record.get(user_id, 0):
            win_record[user_id] = win_streak[user_id]  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥–Ω—É—é –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                                  f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –≤–∞—à–µ–º—É {tamagotchi.pet_name} –¥–æ–±–∞–≤–∏–ª–æ—Å—å {happiness_gain} –µ–¥–∏–Ω–∏—Ü —Å—á–∞—Å—Ç—å—è!\n"
                                  f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_streak[user_id]}\n–†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_record[user_id]}")
    elif result == "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!":
        happiness_loss = random.randint(0, 3)
        tamagotchi.happiness -= happiness_loss  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–∞—Å—Ç—å–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3)
        tamagotchi.happiness = max(0, tamagotchi.happiness)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è –¥–æ 0
        win_streak[user_id] = 0  # –û–±–Ω—É–ª—è–µ–º –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                                  f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ —É –≤–∞—à–µ–≥–æ {tamagotchi.pet_name} –±—ã–ª–æ –æ—Ç–Ω—è—Ç–æ {happiness_loss} –µ–¥–∏–Ω–∏—Ü —Å—á–∞—Å—Ç—å—è.")
    else:
        # –î–ª—è –Ω–∏—á—å–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                                  f"–≠—Ç–æ –Ω–∏—á—å—è! –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.")

    show_end_game_menu(user_id)

    
    
def show_end_game_menu(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    play_again_button = types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    main_menu_button = types.KeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    keyboard.add(play_again_button, main_menu_button)

    bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é?", reply_markup=keyboard)
    user_states[user_id] = 'end_game'
    

def determine_rps_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "–ù–∏—á—å—è!"
    elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
         (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
         (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
        return "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    else:
        return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"


def play_heads_or_tails(user_id):
    global win_streak
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    heads_button = telebot.types.KeyboardButton('–û—Ä–µ–ª')
    tails_button = telebot.types.KeyboardButton('–†–µ—à–∫–∞')
    keyboard.add(heads_button, tails_button)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞?", reply_markup=keyboard)
    user_states[user_id] = 'playing_heads_or_tails'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –∏–≥—Ä–µ "–û—Ä–µ–ª –∏ –†–µ—à–∫–∞"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'playing_heads_or_tails')
def handle_heads_or_tails_choice(message):
    global win_streak
    global win_record
    user_id = message.chat.id
    user_choice = message.text.lower()
    bot_choice = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])

    result = determine_hot_winner(user_choice, bot_choice)
    tamagotchi = tamagotchis[user_id]

    if result == "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!":
        tamagotchi.happiness += 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–∞—Å—Ç—å–µ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
        win_streak[user_id] = win_streak.get(user_id, 0) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        if win_streak[user_id] > win_record.get(user_id, 0):
            win_record[user_id] = win_streak[user_id]  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥–Ω—É—é –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–í—ã–ø–∞–ª–æ: {bot_choice}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                                  f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –≤–∞—à–µ–º—É {tamagotchi.pet_name} –¥–æ–±–∞–≤–∏–ª–æ—Å—å 5 –µ–¥–∏–Ω–∏—Ü —Å—á–∞—Å—Ç—å—è!\n"
                                  f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_streak[user_id]}\n–†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_record[user_id]}")
    else:
        tamagotchi.happiness -= 3  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–∞—Å—Ç—å–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        win_streak[user_id] = 0  # –û–±–Ω—É–ª—è–µ–º –ø–æ–±–µ–¥–Ω—É—é —Å–µ—Ä–∏—é
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–í—ã–ø–∞–ª–æ: {bot_choice}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                                  f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ —É –≤–∞—à–µ–≥–æ {tamagotchi.pet_name} –±—ã–ª–æ –æ—Ç–Ω—è—Ç–æ 3 –µ–¥–∏–Ω–∏—Ü—ã —Å—á–∞—Å—Ç—å—è.")
    
    show_end_game_menu(user_id)
    
def show_end_game_menu(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    play_again_button = types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    main_menu_button = types.KeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
    keyboard.add(play_again_button, main_menu_button)

    bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é?", reply_markup=keyboard)
    user_states[user_id] = 'end_game'
    bot.register_next_step_handler_by_chat_id(user_id, handle_end_game)

def handle_end_game(message):
    user_id = message.chat.id
    if message.text.lower() == "—Å—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        show_play_menu(user_id)
    elif message.text.lower() == "–≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é":
        show_main_menu(user_id)


def determine_hot_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    else:
        return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"


@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
    help_text += "/start - –°–æ–∑–¥–∞—Ç—å —Ç–∞–º–∞–≥–æ—á–∏\n"
    help_text += "/play - –ü–æ–∏–≥—Ä–∞—Ç—å —Å —Ç–∞–º–∞–≥–æ—á–∏\n"
    help_text += "/feed - –ö–æ—Ä–º–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏\n"
    help_text += "/heal - –õ–µ—á–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏\n"
    help_text += "/job  - "
    bot.reply_to(message, help_text)

def decrease_stats():
    current_time = datetime.datetime.now()
    for user_id, tamagotchi in tamagotchis.items():
        time_passed = (current_time - tamagotchi.last_update_time).total_seconds() / 60  # –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö

        if time_passed >= 1:  # –£–º–µ–Ω—å—à–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç
            tamagotchi.hunger -= random.randint(5, 10)  # –£–º–µ–Ω—å—à–∏—Ç—å –≥–æ–ª–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            tamagotchi.happiness -= random.randint(5, 10)  # –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–∞—Å—Ç—å–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

            tamagotchi.hunger = max(0, tamagotchi.hunger)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –≥–æ–ª–æ–¥ –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            tamagotchi.happiness = max(0, tamagotchi.happiness)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Å—á–∞—Å—Ç—å–µ –Ω–µ —Å—Ç–∞–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

            tamagotchi.last_update_time = current_time  # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            

bot.polling()